(()=>{"use strict";try{function e(e){console.log(`[Contex.ly Content] ${e}`)}console.log("=== Contex.ly Content Script Started ==="),console.log("Document readyState:",document.readyState),e("Initializing content script...");const n={"pop-culture":"Explain using references to movies, TV shows, celebrities, and current trends. Use well-known pop culture moments and characters that most people would recognize.","kid-friendly":"Explain as if talking to a 10-year-old child. Use simple words, fun examples, and relatable situations from a kid's perspective, like school, toys, or playground scenarios.","gossip-girl":'Explain in the style of Gossip Girl - dramatic, scandalous, and full of Upper East Side drama. Use fashion, luxury, and social status references. Start with "Hey Upper East Siders..." and end with "XOXO, Gossip Girl"',"gen-z":"Explain using Gen Z slang, TikTok references, and modern internet culture. Include emojis, current memes, and trending phrases. Keep it very casual and slightly chaotic.","harry-potter":"Explain using references to the Harry Potter universe, including magical concepts, Hogwarts houses, spells, and characters.",marvel:"Explain using references to the Marvel Cinematic Universe, including superheroes, villains, infinity stones, and iconic MCU moments."},t=document.createElement("style");async function o(t,o){var r,s,i,a;try{e("Fetching API key from storage...");const l=await chrome.storage.sync.get("openaiApiKey");if(e("Storage access successful"),!l.openaiApiKey)throw new Error("No API key found. Please add your OpenAI API key in the extension settings.");const c=n[o];e(`Using metaphor style: ${o} (${c})`);let d="You are a creative assistant that explains concepts using metaphors and analogies. ",p="";switch(o){case"pop-culture":d+="You specialize in using current pop culture references. Make sure to reference specific movies, shows, or celebrities that are widely known.",p=`Explain this using popular movies, TV shows, or celebrity references: "${t}"`;break;case"kid-friendly":d+="You are talking to a 10-year-old child. Use simple words and fun examples that kids can relate to.",p=`Explain this to a 10-year-old using things they understand like toys, school, or games: "${t}"`;break;case"gossip-girl":d+="You are Gossip Girl. Be dramatic, scandalous, and use Upper East Side references.",p=`Hey Upper East Siders, let me tell you about this juicy situation: "${t}" XOXO`;break;case"gen-z":d+="You are a Gen Z social media expert. Use current slang, emojis, and internet culture references.",p=`bestie, explain this using gen z vibes and current internet trends fr fr: "${t}"`;break;case"harry-potter":d+="You are a Hogwarts professor explaining concepts using magical references.",p=`Explain this using Harry Potter references and magical concepts: "${t}"`;break;case"marvel":d+="You are a Marvel superfan who explains everything through MCU references.",p=`Explain this using Marvel Cinematic Universe references and characters: "${t}"`;break;default:d+=c,p=`Explain this text: "${t}"`}const u=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${l.openaiApiKey}`},body:JSON.stringify({model:"gpt-3.5-turbo",messages:[{role:"system",content:d},{role:"user",content:p}],temperature:.8,max_tokens:250})});if(e(`API response status: ${u.status}`),!u.ok){const e=await u.json();throw new Error((null===(r=e.error)||void 0===r?void 0:r.message)||`API Error (${u.status}): ${e.message||"Unknown error"}`)}const x=await u.json();if(!(null===(a=null===(i=null===(s=x.choices)||void 0===s?void 0:s[0])||void 0===i?void 0:i.message)||void 0===a?void 0:a.content))throw new Error("Invalid response format from OpenAI");return e("Successfully generated explanation"),x.choices[0].message.content}catch(n){const t=`Error generating explanation: ${n.message}`;return e(t),t}}t.textContent='\n    .contex-ly-container {\n      position: fixed;\n      z-index: 10000;\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\n      width: 600px;\n      max-width: 80vw;\n      height: 80vh;\n      display: none;\n      font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif;\n      animation: contex-ly-fade-in 0.3s ease-out;\n      pointer-events: none;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .contex-ly-container.active {\n      pointer-events: auto;  /* Active state: allow interaction */\n    }\n\n    /* Add fade out animation */\n    @keyframes contex-ly-fade-out {\n      from { opacity: 1; transform: translateY(0); }\n      to { opacity: 0; transform: translateY(10px); }\n    }\n\n    .contex-ly-container.closing {\n      animation: contex-ly-fade-out 0.2s ease-in forwards;\n    }\n\n    .contex-ly-content {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      overflow: hidden;\n    }\n\n    .contex-ly-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 16px 24px;\n      background: white;\n      border-bottom: 1px solid #e0e0e0;\n      border-radius: 12px 12px 0 0;\n    }\n\n    .contex-ly-body {\n      flex: 1;\n      overflow-y: auto;\n      padding: 24px;\n      display: flex;\n      flex-direction: column;\n      gap: 16px;\n    }\n\n    .contex-ly-controls {\n      padding: 16px 24px;\n      background: white;\n      border-top: 1px solid #e0e0e0;\n      border-radius: 0 0 12px 12px;\n    }\n\n    .contex-ly-text-container {\n      background: #f5f5f5;\n      border-radius: 8px;\n      padding: 16px;\n      font-size: 14px;\n      line-height: 1.5;\n      border: 1px solid #e0e0e0;\n    }\n\n    .contex-ly-explanation {\n      background: white;\n      padding: 16px;\n      border-radius: 8px;\n      font-size: 14px;\n      line-height: 1.6;\n      flex: 1;\n    }\n\n    .contex-ly-select-wrapper {\n      margin-bottom: 16px;\n    }\n\n    @keyframes contex-ly-fade-in {\n      from { opacity: 0; transform: translateY(10px); }\n      to { opacity: 1; transform: translateY(0); }\n    }\n\n    .contex-ly-select {\n      width: 100%;\n      padding: 10px;\n      border: 2px solid #e0e0e0;\n      border-radius: 8px;\n      background: white;\n      font-size: 14px;\n      color: #333;\n      cursor: pointer;\n      transition: all 0.2s ease;\n      appearance: none;\n      background-image: url(\'data:image/svg+xml;charset=US-ASCII,<svg width="14" height="8" viewBox="0 0 14 8" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1 1L7 7L13 1" stroke="%23666666" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>\');\n      background-repeat: no-repeat;\n      background-position: right 12px center;\n      padding-right: 32px;\n    }\n\n    .contex-ly-select:hover {\n      border-color: #2196F3;\n    }\n\n    .contex-ly-select:focus {\n      outline: none;\n      border-color: #2196F3;\n      box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);\n    }\n\n    .contex-ly-button {\n      padding: 10px 16px;\n      border: none;\n      border-radius: 8px;\n      cursor: pointer;\n      font-weight: 500;\n      transition: all 0.2s ease;\n    }\n\n    .contex-ly-button-primary {\n      background: #2196F3;\n      color: white;\n    }\n\n    .contex-ly-button-primary:hover {\n      background: #1976D2;\n      transform: translateY(-1px);\n    }\n\n    .contex-ly-button-secondary {\n      background: #e0e0e0;\n      color: #333;\n    }\n\n    .contex-ly-button-secondary:hover {\n      background: #d0d0d0;\n    }\n\n    .contex-ly-close {\n      background: #f5f5f5;\n      border: 1px solid #e0e0e0;\n      padding: 8px;\n      cursor: pointer;\n      color: #333;\n      font-size: 20px;\n      line-height: 1;\n      transition: all 0.2s ease;\n      width: 36px;\n      height: 36px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 50%;\n      position: relative;\n      z-index: 1001;\n      margin: 0;\n    }\n\n    .contex-ly-close:hover {\n      background: #e0e0e0;\n      color: #000;\n    }\n\n    .contex-ly-close:active {\n      background: #ccc;\n      transform: scale(0.95);\n    }\n\n    .contex-ly-divider {\n      height: 1px;\n      background: #e0e0e0;\n      margin: 16px 0;\n    }\n\n    .contex-ly-text {\n      color: #666;\n      font-size: 14px;\n      line-height: 1.6;\n    }\n\n    .contex-ly-label {\n      display: block;\n      margin-bottom: 8px;\n      color: #666;\n      font-size: 14px;\n      font-weight: 500;\n    }\n  ',document.head.appendChild(t);const r=document.createElement("div");r.style.cssText="\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: #4CAF50;\n    color: white;\n    padding: 10px;\n    border-radius: 4px;\n    z-index: 10000;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  ",r.textContent="Contex.ly loaded!",document.body.appendChild(r),e("Notification added to page"),setTimeout((()=>{r.remove(),e("Initial notification removed")}),5e3);const s=document.createElement("div");function i(){e("Attempting to close container...");const n=document.getElementById("contex-ly-result");n&&(n.classList.add("closing"),n.classList.remove("active"),n.style.pointerEvents="none",setTimeout((()=>{for(n.style.display="none",n.classList.remove("closing"),document.removeEventListener("mousedown",a),document.removeEventListener("keydown",l);n.firstChild;)n.removeChild(n.firstChild);e("Container closed and cleaned up successfully")}),200))}s.id="contex-ly-result",s.className="contex-ly-container",document.body.appendChild(s),e("Result container ready");const a=e=>{const n=document.getElementById("contex-ly-result");n&&"block"===n.style.display&&!n.contains(e.target)&&i()},l=e=>{"Escape"===e.key&&i()};function c(t,o="",r=!0){try{for(;s.firstChild;)s.removeChild(s.firstChild);s.className="contex-ly-container";const c=document.createElement("div");c.className="contex-ly-content";const d=document.createElement("div");d.className="contex-ly-header";const p=document.createElement("h3");p.style.margin="0",p.style.color="#333",p.style.fontSize="16px",p.textContent="Contex.ly Explanation";const u=document.createElement("button");u.className="contex-ly-close",u.id="contex-ly-close",u.setAttribute("aria-label","Close"),u.setAttribute("type","button"),u.textContent="✕",u.addEventListener("click",(n=>{n.preventDefault(),n.stopPropagation(),e("Close button clicked"),i()})),d.appendChild(p),d.appendChild(u),c.appendChild(d);const x=document.createElement("div");if(x.className="contex-ly-body",o){const e=document.createElement("div");e.innerHTML=`\n          <strong>Selected Text:</strong>\n          <div class="contex-ly-text-container">\n            "${o}"\n          </div>\n        `,x.appendChild(e)}const m=document.createElement("div");if(m.className="contex-ly-explanation",m.innerHTML=t,x.appendChild(m),c.appendChild(x),r){const e=document.createElement("div");e.className="contex-ly-controls";const t=document.createElement("div");t.className="contex-ly-select-wrapper",t.innerHTML=`\n      <div>\n        <label class="contex-ly-label">\n          Choose your vibe:\n        </label>\n        <select id="metaphor-style" class="contex-ly-select">\n          ${Object.entries(n).map((([e,n])=>`<option value="${e}" title="${n}">${{"pop-culture":"🎬 Pop Culture","kid-friendly":"🎈 Kid-Friendly","gossip-girl":"💋 Gossip Girl","gen-z":"✨ Gen Z","harry-potter":"⚡ Harry Potter",marvel:"🦸‍♂️ Marvel"}[e]||e}</option>`)).join("")}\n        </select>\n        <button id="regenerate" class="contex-ly-button contex-ly-button-primary" style="width: 100%; margin-top: 12px;">\n          ✨ Regenerate with Selected Style\n        </button>\n      </div>\n    `,e.appendChild(t),c.appendChild(e)}s.appendChild(c),s.style.display="block",requestAnimationFrame((()=>{s.classList.add("active")}));const y=window.innerWidth,g=Math.min(600,.8*y);s.style.left=`${Math.max(0,(y-g)/2)}px`,s.style.top="10vh",document.addEventListener("mousedown",a),document.addEventListener("keydown",l),e("Result popup displayed with fixed height and scrollable content")}catch(n){const t=n;e(`Error in showResult: ${t.message}`);const o=document.createElement("div");o.style.cssText="\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: #f44336;\n        color: white;\n        padding: 10px;\n        border-radius: 4px;\n        z-index: 10000;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      ",o.textContent=`Error: ${t.message}`,document.body.appendChild(o),setTimeout((()=>o.remove()),5e3)}}chrome.runtime.onMessage.addListener(((n,t,r)=>(e(`Received message: ${JSON.stringify(n)}`),"EXPLAIN_TEXT"===n.type&&n.text&&(e(`Processing explanation request for text: ${n.text}`),c('\n        <div style="text-align: center; padding: 20px;">\n          <div style="margin-bottom: 12px; color: #666;">\n            Generating explanation...\n          </div>\n          <div style="color: #666; font-size: 14px;">\n            Please wait while we craft your explanation\n          </div>\n        </div>\n      ',n.text,!1),o(n.text,"pop-culture").then((e=>{c(`\n          ${e.startsWith("Error")?`\n            <div style="color: #f44336;">\n              <strong>Error:</strong><br>\n              ${e}\n            </div>\n          `:`\n            <div>\n              <strong>Explanation:</strong>\n              <div style="margin-top: 8px; line-height: 1.6;">\n                ${e}\n              </div>\n            </div>\n          `}\n        `,n.text)})).catch((t=>{e(`Error in explanation promise: ${t.message}`),c(`\n          <div style="color: #f44336;">\n            <strong>Error:</strong><br>\n            Failed to generate explanation: ${t.message}\n          </div>\n        `,n.text)})),r({status:"success"})),!0))),document.addEventListener("mousedown",(e=>{const n=document.getElementById("contex-ly-result");n&&"block"===n.style.display&&!n.contains(e.target)&&i()})),document.addEventListener("keydown",(e=>{if("Escape"===e.key){const e=document.getElementById("contex-ly-result");e&&"block"===e.style.display&&i()}})),e("Content script initialization complete")}catch(d){const p=d;console.error("[Contex.ly Content] Fatal error:",p.message),console.error("[Contex.ly Content] Stack trace:",p.stack)}})();